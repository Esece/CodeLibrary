using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Reflection.Emit;
using System.Web;
using System.Web.Http;
using System.Web.Mvc;
using System.Web.Routing;

class RuntimeWrapperModelBinderProvider : IModelBinderProvider
{
    public IModelBinder GetBinder(Type modelType) => modelType == typeof(ContactInfo) ? new RuntimeWrapperModelBinder() : null;
}

class RuntimeWrapperModelBinder : DefaultModelBinder
{
    public override object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)
    {
        var runtimeType = GenerateRuntimeType(typeof(ContactInfo));
        bindingContext.ModelMetadata = ModelMetadataProviders.Current.GetMetadataForType(null, runtimeType);

        return base.BindModel(controllerContext, bindingContext);
    }

    static Type GenerateRuntimeType(Type type)
    {
        var aName = new AssemblyName((type.Namespace != null ? type.Namespace + "." : "") + "Runtime" + type.Name);
        var ab = AppDomain.CurrentDomain.DefineDynamicAssembly(aName, System.Reflection.Emit.AssemblyBuilderAccess.Run);
        var moduleBuilder = ab.DefineDynamicModule(aName.Name);
        var typeBuilder = moduleBuilder.DefineType("<autogenerated>Runtime" + type.Name, TypeAttributes.Public | TypeAttributes.BeforeFieldInit, type);
        var ctorAttrs = MethodAttributes.Public | MethodAttributes.HideBySig | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName;
        var ctor0 = typeBuilder.DefineConstructor(ctorAttrs, CallingConventions.Standard, Type.EmptyTypes);

        var ctor0IL = ctor0.GetILGenerator();
        ctor0IL.Emit(OpCodes.Ret);

        foreach (var prop in type.GetProperties())
        {
            var attrs = MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig | MethodAttributes.NewSlot;
            var getMethodBuilder = typeBuilder.DefineMethod("get_" + prop.Name, attrs, prop.PropertyType, Type.EmptyTypes);

            getMethodBuilder.SetCustomAttribute(new CustomAttributeBuilder(typeof(System.Runtime.CompilerServices.CompilerGeneratedAttribute).GetConstructors()[0], new object[0]));

            var numberGetIL = getMethodBuilder.GetILGenerator();
            numberGetIL.Emit(OpCodes.Ldarg_0);
            numberGetIL.Emit(OpCodes.Call, prop.GetMethod);
            numberGetIL.Emit(OpCodes.Ret);

            var setMethodBuilder = typeBuilder.DefineMethod("set_" + prop.Name, attrs, null, new[] { prop.PropertyType });
            var numberSetIL = setMethodBuilder.GetILGenerator();

            setMethodBuilder.SetCustomAttribute(new CustomAttributeBuilder(typeof(System.Runtime.CompilerServices.CompilerGeneratedAttribute).GetConstructors()[0], new object[0]));

            numberSetIL.Emit(OpCodes.Ldtoken, type);
            numberSetIL.Emit(OpCodes.Call, typeof(Type).GetMethod("GetTypeFromHandle"));
            numberSetIL.Emit(OpCodes.Ldstr, "<" + prop.Name + ">k__BackingField");
            numberSetIL.Emit(OpCodes.Ldc_I4_S, (byte)(BindingFlags.NonPublic | BindingFlags.Instance));
            numberSetIL.Emit(OpCodes.Callvirt, typeof(Type).GetMethod("GetField", new[] { typeof(string), typeof(BindingFlags) }));
            numberSetIL.Emit(OpCodes.Ldarg_0);
            numberSetIL.Emit(OpCodes.Ldarg_1);
            numberSetIL.Emit(OpCodes.Callvirt, typeof(FieldInfo).GetMethod("SetValue", new[] { typeof(object), typeof(object) }));
            numberSetIL.Emit(OpCodes.Ret);

            var propertyBuilder = typeBuilder.DefineProperty("" + prop.Name, System.Reflection.PropertyAttributes.None, prop.PropertyType, null);
            propertyBuilder.SetGetMethod(getMethodBuilder);
            propertyBuilder.SetSetMethod(setMethodBuilder);
        }

        return typeBuilder.CreateType();
    }
}
